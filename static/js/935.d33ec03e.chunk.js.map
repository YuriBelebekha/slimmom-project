{"version":3,"file":"static/js/935.d33ec03e.chunk.js","mappings":"mMAIaA,GAAkBC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAH,uZAWN,qBAAGE,MAAkBC,QAAQC,QAAQC,MAArC,GAEWH,EAAAA,EAAAA,QAAAA,QAAAA,QAIT,qBAAGA,MAAkBC,QAAQC,QAAQC,MAArC,GACUH,EAAAA,EAAAA,QAAAA,QAAAA,Q,SCpBrBI,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC7B,OACE,SAACR,EAAD,CAAiBS,KAAK,SAASC,QAAQ,YAAvC,SACGF,GAGN,C,8TCLYG,GAAiBV,EAAAA,EAAAA,GAAOW,EAAAA,EAAPX,CAAH,4N,wCCCdY,EAAUZ,EAAAA,EAAAA,KAAH,+JAKhBE,EAAAA,EAAAA,YAAAA,GAAqB,WAMZW,GAAeb,EAAAA,EAAAA,GAAOc,EAAAA,EAAPd,CAAH,8xBAcZE,EAAAA,EAAAA,QAAAA,QAAAA,OAIcA,EAAAA,EAAAA,QAAAA,QAAAA,OAiBvBA,EAAAA,EAAAA,YAAAA,GAAqB,W,SClCnBa,EAAoCC,EAAAA,KAAaC,MAAM,CAM3DC,OAAQF,EAAAA,GACE,uBACPG,IAAI,EAAG,kBACPC,IAAI,IAAM,sBACVC,WACAC,SAAS,wBAGDC,EAAyB,WACpC,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAGLC,EACVC,EAAAA,EAAAA,WADFC,SAAYF,kBAEdG,QAAQC,IAAIJ,GAEZ,OAAsCK,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOG,EAAP,KAAwBC,EAAxB,KAGMC,EAAoB,SAAAC,GACxBJ,EAAeI,EAAMC,OAAOC,MAC7B,EAGKC,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,OAAOC,IAASN,EAAmB,IACpC,GAAE,KAEHO,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLH,EAAiBI,QAClB,CACF,IAGGZ,GACFV,GAASuB,EAAAA,EAAAA,GAAoBb,IAW/BH,QAAQC,IAAIJ,GACZG,QAAQC,IAAII,GAgBZ,IAAMY,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,OAAQ,GACRjC,OAAQ,IAGVkC,iBAAkBrC,EAElBsC,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cACxBC,EAAU,CACdN,OAAQG,EAAOH,OACfjC,OAAQoC,EAAOpC,QAGjBM,GAASuB,EAAAA,EAAAA,GAAoBU,IAAUC,SAAQ,WAC7CF,GAAc,EACf,IAEDD,GACD,IAGH,OACE,UAACI,EAAA,EAAD,YACE,SAACjD,EAAD,CAAgBkD,UAAU,KAA1B,SAA+B,yBAE/B,UAAChD,EAAD,CAASyC,SAAUL,EAAOa,aAA1B,WACE,SAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,SACHC,kBAAgB,EAChBxB,MAAOL,EACP8B,cAAexB,EACfyB,SA1Da,SAACC,EAAQ3B,GAC5BJ,EAAmBI,EACpB,EA0DO4B,QAASzC,EAAkB0C,KAAI,SAAAC,GAAM,OAxDdC,EAyDCD,EAAOE,MAAMC,IAxD7B,GAAGC,cAAgBH,EAAOI,MAAM,GADhD,IAA+BJ,CAwDc,IAGrCK,aAAc,SAACC,EAAOP,GACpB,OACE,2CAAQO,GAAR,IAAeC,IAAKD,EAAMd,KACvBO,EAGN,EACDS,YAAa,SAAAC,GAAM,OACjB,SAACpE,GAAD,kBACMoE,GADN,IAEEC,MAAM,qBACNC,YAAU,kBACLF,EAAOE,YADF,IAER3E,KAAM,aANO,KAYrB,SAACK,EAAD,CACEJ,QAAQ,WACRuD,GAAG,SACHzD,KAAK,SACL2E,MAAM,cACNzC,MAAOO,EAAOM,OAAOpC,OACrBiD,SAAUnB,EAAOoC,aACjBC,OAAQrC,EAAOsC,WACfC,MAAOvC,EAAOwC,QAAQtE,QAAUuE,QAAQzC,EAAO0C,OAAOxE,QACtDyE,WAAY3C,EAAOwC,QAAQtE,QAAU8B,EAAO0C,OAAOxE,SAGpDQ,EAAWkE,MAAQ1F,EAAAA,EAAAA,YAAAA,OAAAA,QAClB,SAACI,EAAA,EAAD,CAAcC,KAAK,SAEnB,SAACD,EAAA,EAAD,CAAcC,KAAK,WAK5B,E,oBC9JYsF,GAAqB7F,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,CAAH,yOAKpBE,EAAAA,EAAAA,QAAAA,QAAAA,MAGWA,EAAAA,EAAAA,QAAAA,QAAAA,OACWA,EAAAA,EAAAA,QAAAA,QAAAA,OAGTA,EAAAA,EAAAA,QAAAA,QAAAA,QAIX4F,GAA2B9F,EAAAA,EAAAA,GAAO2D,EAAAA,EAAP3D,CAAH,2JAMfE,EAAAA,EAAAA,QAAAA,QAAAA,OAIT6F,GAAW/F,EAAAA,EAAAA,GAAOgG,EAAAA,EAAPhG,CAAH,yFAMRiG,GAA+BjG,EAAAA,EAAAA,GAAO2D,EAAAA,EAAP3D,CAAH,sFC5B5BkG,EAA2B,WACtC,MAAwBC,EAAAA,UAAe,GAAvC,eAAOC,EAAP,KAAaC,EAAb,KAIA,OACE,4BACE,SAACN,EAAD,CACEK,KAAMA,EACNE,QANc,kBAAMD,GAAQ,EAAd,EAOd,kBAAgB,oBAChB,mBAAiB,0BAJnB,UAME,UAACP,EAAD,YACE,SAACG,EAAD,WACE,SAACM,EAAA,EAAD,OAGF,SAAChF,EAAD,UAIJ,SAACsE,EAAD,CAAoBW,QApBL,kBAAMH,GAAQ,EAAd,EAoBf,SAAyC,QAG9C,ECjCYI,GAASzG,EAAAA,EAAAA,GAAO2D,EAAAA,EAAP3D,CAAH,mGCAN0G,EAAqB,WAChC,OACE,SAACD,EAAD,WACE,SAAClF,EAAD,KAGL,E,WCLYoF,IAAmB3G,EAAAA,EAAAA,GAAO2D,EAAAA,EAAP3D,CAAH,0YAMzBE,EAAAA,EAAAA,YAAAA,GAAqB,UAKbA,EAAAA,EAAAA,QAAAA,QAAAA,SASNA,EAAAA,EAAAA,YAAAA,GAAqB,WAOd0G,IAA0B5G,EAAAA,EAAAA,GAAO2D,EAAAA,EAAP3D,CAAH,8MAMhCE,EAAAA,EAAAA,YAAAA,GAAqB,WClBd2G,GADS,IAAIC,KAGXC,GAAoB,WAC/B,IAAMrF,GAAaC,EAAAA,EAAAA,MACFF,EAAAA,EAAAA,KACjBD,EAASwF,EAAAA,GAAAA,MAAetD,SAAQ,WAAQ,IAMxC,OACE,iCACE,SAACiD,GAAD,WACE,UAACM,EAAA,EAAD,CAAsBC,YAAaC,EAAAA,EAAnC,WACE,SAACC,EAAA,EAAD,CACEC,OAAO,aACPC,SAVW,SAAA7E,GACnBoE,GAAepE,CAChB,EASSA,MAAO8E,IAAMV,OAEf,SAACW,EAAA,EAAD,UAIJ,SAACZ,GAAD,UACGlF,EAAWkE,MAAQ1F,EAAAA,EAAAA,YAAAA,OAAAA,QAClB,SAACgG,EAAD,KAEA,SAACQ,EAAD,QAKT,C","sources":["components/ButtonSubmit/ButtonSubmit.styled.jsx","components/ButtonSubmit/ButtonSubmit.jsx","components/VisuallyHidden/VisuallyHidden.styled.jsx","components/DiarySearchProductForm/DiarySearchProductForm.styled.jsx","components/DiarySearchProductForm/DiarySearchProductForm.jsx","components/DiarySearchProductMobile/DiarySearchProductMobile.styled.jsx","components/DiarySearchProductMobile/DiarySearchProductMobile.jsx","components/DiarySearchProduct/DiarySearchProduct.styled.jsx","components/DiarySearchProduct/DiarySearchProduct.jsx","components/DiaryUserCalendar/DiaryUserCalendar.styled.jsx","components/DiaryUserCalendar/DiaryUserCalendar.jsx"],"sourcesContent":["import { Button } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { theme } from '../../constants/theme';\n\nexport const ButtonSubmitCss = styled(Button)`\n  min-width: 180px;\n  padding: 13px 22px;\n\n  font-family: verdanaBold;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 17px;\n  letter-spacing: 0.04em;\n  text-transform: capitalize;\n\n  background-color: ${({ theme }) => theme.palette.primary.accent};\n  border-radius: 30px;\n  box-shadow: 0px 4px 10px 0px ${theme.palette.primary.accent};\n\n  &:hover,\n  &:focus {\n    background-color: ${({ theme }) => theme.palette.primary.accent};\n    box-shadow: 0px 2px 5px 0px ${theme.palette.primary.accent};\n  }\n`;\n","import { ButtonSubmitCss } from './ButtonSubmit.styled';\n\nexport const ButtonSubmit = ({ name }) => {  \n  return (\n    <ButtonSubmitCss type=\"submit\" variant=\"contained\" >\n      {name}\n    </ButtonSubmitCss>\n  )\n};","import styled from '@emotion/styled';\nimport { Typography } from '@mui/material';\n\nexport const VisuallyHidden = styled(Typography)`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n`;\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\nimport { theme } from '../../constants/theme';\n\nexport const FormCss = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  ${theme.breakpoints.up('tablet')} {\n    flex-direction: row;\n    align-items: start;\n  }\n`;\n\nexport const TextFieldCss = styled(TextField)`\n  width: 280px;\n  padding: 4px 0;\n  margin-bottom: 32px;\n\n  & label {\n    font-family: VerdanaBold;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: 17px;\n    letter-spacing: 0.04em;\n  }\n\n  & label.Mui-focused {\n    color: ${theme.palette.primary.accent};\n  }\n\n  & .MuiInput-underline:after {\n    border-bottom-color: ${theme.palette.primary.accent};\n  }\n\n  & .MuiInput-root {\n    font-family: VerdanaBold;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: 17px;\n    letter-spacing: 0.04em;\n    background: transparent;\n  }\n\n  & .MuiFormHelperText-root {\n    position: absolute;\n    bottom: -20px;\n  }\n\n  ${theme.breakpoints.up('tablet')} {\n    width: 240px;\n\n    &:first-of-type {\n      margin-right: 20px;\n    }\n\n    &:nth-of-type(2) {\n      width: 106px;\n      margin-right: 85px;\n    }\n  }\n`;\n","import { useState, useMemo, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport { getProductsFromList } from 'redux/productSearch/productSearchOperations';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport { useScreenSize } from '../../hooks/useScreenSize';\nimport { store } from '../../redux/store';\nimport { theme } from '../../constants/theme';\nimport { VisuallyHidden } from '../VisuallyHidden';\nimport { ButtonSubmit } from '../ButtonSubmit/ButtonSubmit';\n\nimport { Box, Autocomplete } from '@mui/material';\nimport { FormCss, TextFieldCss } from './DiarySearchProductForm.styled';\n\nconst searchProductFormValidationSchema = yup.object().shape({\n  // search: yup\n  //   .string('Enter product name')\n  //   .min(2, 'Minimum 2 characters length')\n  //   .max(50, 'Maximum 50 characters length')\n  //   .required('Product name is required'),\n  weight: yup\n    .number('Enter your password')\n    .min(1, 'Minimum 1 gram')\n    .max(3000, 'Maximum 3000 grams')\n    .positive()\n    .required('Weight is required'),\n});\n\nexport const DiarySearchProductForm = () => {\n  const dispatch = useDispatch();\n  const screenSize = useScreenSize();\n\n  const {\n    products: { foundProductsList },\n  } = store.getState();\n  console.log(foundProductsList);\n\n  const [productName, setProductName] = useState('');\n  const [selectedProduct, setSelectedProduct] = useState('');\n  // const [productId, setProductId] = useState('');\n\n  const handleInputChange = event => {\n    setProductName(event.target.value);\n  };\n\n  // START. Debounce on inputs\n  const debouncedResults = useMemo(() => {\n    return debounce(handleInputChange, 500);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      debouncedResults.cancel();\n    };\n  });\n  // END. Debounce on inputs\n\n  if (productName) {\n    dispatch(getProductsFromList(productName));\n  }\n\n  const handleChange = (_event, value) => {\n    setSelectedProduct(value);\n  };\n\n  function capitalizeFirstLetter(string) {\n    return string[0].toUpperCase() + string.slice(1);\n  }\n\n  console.log(foundProductsList);\n  console.log(selectedProduct);\n\n  // const handleClose = (event, reason) => {\n\n  //   if (foundProductsList && selectedProduct) {\n  //     foundProductsList.map(product => {\n  //       console.log(product.title.en);\n  //       console.log(selectedProduct);\n  //       return product.title.en.toLowerCase() === selectedProduct.toLowerCase()\n  //         ? setProductId(product._id)\n  //         : setProductId('');\n  //     });\n  //   }\n  // };\n  // console.log(selectedProduct, '-');\n\n  const formik = useFormik({\n    initialValues: {\n      search: '',\n      weight: '',\n    },\n\n    validationSchema: searchProductFormValidationSchema,\n\n    onSubmit: (values, { resetForm, setSubmitting }) => {\n      const payload = {\n        search: values.search,\n        weight: values.weight,\n      };\n\n      dispatch(getProductsFromList(payload)).finally(() => {\n        setSubmitting(false);\n      });\n\n      resetForm();\n    },\n  });\n\n  return (\n    <Box>\n      <VisuallyHidden component=\"h2\">Search Product Form</VisuallyHidden>\n\n      <FormCss onSubmit={formik.handleSubmit}>\n        <Autocomplete\n          freeSolo\n          id=\"search\"\n          disableClearable\n          value={selectedProduct}\n          onInputChange={debouncedResults}\n          onChange={handleChange}\n          // onClose={handleClose}\n          options={foundProductsList.map(option =>\n            capitalizeFirstLetter(option.title.en)\n          )}\n          renderOption={(props, option) => {\n            return (\n              <li {...props} key={props.id}>\n                {option}\n              </li>\n            );\n          }}\n          renderInput={params => (\n            <TextFieldCss\n              {...params}\n              label=\"Enter product name\"\n              InputProps={{\n                ...params.InputProps,\n                type: 'search',\n              }}\n            />\n          )}\n        />\n\n        <TextFieldCss\n          variant=\"standard\"\n          id=\"weight\"\n          name=\"weight\"\n          label=\"Enter grams\"\n          value={formik.values.weight}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.weight && Boolean(formik.errors.weight)}\n          helperText={formik.touched.weight && formik.errors.weight}\n        />\n\n        {screenSize.width < theme.breakpoints.values.tablet ? (\n          <ButtonSubmit name=\"Add\" />\n        ) : (\n          <ButtonSubmit name=\"+\" />\n        )}\n      </FormCss>\n    </Box>\n  );\n};\n\n// export const DiarySearchProductForm = () => {\n//   const dispatch = useDispatch();\n//   const screenSize = useScreenSize();\n//   const [productName, setProductName] = useState('');\n//   const [inputValue, setInputValue] = useState('');\n//   const [productId, setProductId] = useState('');\n\n//   const {\n//     products: { foundProductsList },\n//   } = store.getState();\n//   // console.log(foundProductsList);\n\n//   const handleInputChange = (event, value) => {\n//     dispatch(getProductsFromList(event.target.value));\n//     setInputValue(value);\n//   };\n\n//   const handleChange = (_event, value) => {\n//     setProductName(value);\n//     console.log(value);\n\n//     foundProductsList.map(option => {\n//       return option.title.en.toLowerCase() === value.toLowerCase()\n//         ? setProductId(option._id)\n//         : setProductId('');\n//     });\n//   };\n\n//   function capitalizeFirstLetter(string) {\n//     return string[0].toUpperCase() + string.slice(1);\n//   }\n\n//   const formik = useFormik({\n//     initialValues: {\n//       search: '',\n//       weight: '',\n//     },\n\n//     validationSchema: searchProductFormValidationSchema,\n\n//     onSubmit: (values, { resetForm, setSubmitting }) => {\n//       const payload = {\n//         search: productId,\n//         weight: values.weight,\n//       };\n\n//       dispatch(getProductsFromList(payload)).finally(() => {\n//         setSubmitting(false);\n//       });\n\n//       resetForm();\n//     },\n//   });\n\n//   return (\n//     <Box>\n//       <VisuallyHidden component=\"h2\">Search Product Form</VisuallyHidden>\n\n//       <FormCss onSubmit={formik.handleSubmit}>\n//         <Autocomplete\n//           disablePortal\n//           id=\"search\"\n//           value={productName}\n//           inputValue={inputValue}\n//           onInputChange={handleInputChange}\n//           onChange={handleChange}\n//           options={foundProductsList.map(option =>\n//             capitalizeFirstLetter(option.title.en)\n//           )}\n//           sx={{ width: 300 }}\n//           renderOption={(props, option) => {\n//             return (\n//               <li {...props} key={props.id}>\n//                 {option}\n//               </li>\n//             );\n//           }}\n//           renderInput={params => (\n//             <TextFieldCss {...params} label=\"Enter product name\" />\n//           )}\n//         />\n\n//         <TextFieldCss\n//           variant=\"standard\"\n//           id=\"weight\"\n//           name=\"weight\"\n//           label=\"Enter grams\"\n//           value={formik.values.weight}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.weight && Boolean(formik.errors.weight)}\n//           helperText={formik.touched.weight && formik.errors.weight}\n//         />\n\n//         {screenSize.width < theme.breakpoints.values.tablet ? (\n//           <ButtonSubmit name=\"Add\" />\n//         ) : (\n//           <ButtonSubmit name=\"+\" />\n//         )}\n//       </FormCss>\n//     </Box>\n//   );\n// };\n\n// import { useDispatch } from 'react-redux';\n// import { selectProductFromList } from 'redux/productSearch/productSearchOperations';\n// import { useFormik } from 'formik';\n// import * as yup from 'yup';\n// import { VisuallyHidden } from '../VisuallyHidden';\n// import { ButtonSubmit } from '../ButtonSubmit/ButtonSubmit';\n// import { useScreenSize } from '../../hooks/useScreenSize';\n// import { theme } from '../../constants/theme';\n\n// import { Box } from '@mui/material';\n// import { FormCss, TextFieldCss } from './DiarySearchProductForm.styled';\n\n// const searchProductFormValidationSchema = yup.object().shape({\n//   search: yup\n//     .string('Enter product name')\n//     .min(2, 'Minimum 2 characters length')\n//     .max(50, 'Maximum 50 characters length')\n//     .required('Product name is required'),\n//   weight: yup\n//     .number('Enter your password')\n//     .min(1, 'Minimum 1 gram')\n//     .max(3000, 'Maximum 3000 grams')\n//     .positive()\n//     .required('Weight is required'),\n// });\n\n// export const DiarySearchProductForm = () => {\n//   const dispatch = useDispatch();\n//   const screenSize = useScreenSize();\n\n//   const formik = useFormik({\n//     initialValues: {\n//       search: '',\n//       weight: '',\n//     },\n\n//     validationSchema: searchProductFormValidationSchema,\n\n//     onSubmit: (values, { resetForm, setSubmitting }) => {\n//       console.log(values);\n\n//       const payload = {\n//         search: values.search,\n//         weight: values.weight,\n//       };\n//       dispatch(selectProductFromList(payload)).finally(() => {\n//         setSubmitting(false);\n//       });\n\n//       resetForm();\n//     },\n//   });\n//   // console.log(formik.handleChange);\n\n//   return (\n//     <Box>\n//       <VisuallyHidden component=\"h2\">Search Product Form</VisuallyHidden>\n\n//       <FormCss onSubmit={formik.handleSubmit}>\n//         <TextFieldCss\n//           variant=\"standard\"\n//           id=\"search\"\n//           name=\"search\"\n//           label=\"Enter product name\"\n//           value={formik.values.search}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.search && Boolean(formik.errors.search)}\n//           helperText={formik.touched.search && formik.errors.search}\n//         />\n\n//         <TextFieldCss\n//           variant=\"standard\"\n//           id=\"weight\"\n//           name=\"weight\"\n//           label=\"Enter grams\"\n//           value={formik.values.weight}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.weight && Boolean(formik.errors.weight)}\n//           helperText={formik.touched.weight && formik.errors.weight}\n//         />\n\n//         {screenSize.width < theme.breakpoints.values.tablet ? (\n//           <ButtonSubmit name=\"Add\" />\n//         ) : (\n//           <ButtonSubmit name=\"+\" />\n//         )}\n//       </FormCss>\n//     </Box>\n//   );\n// };\n","import { Button } from '@mui/material';\nimport { Box } from '@mui/material';\nimport { Modal } from '@mui/material';\n\nimport styled from '@emotion/styled';\nimport { theme } from '../../constants/theme';\n\nexport const ButtonContainedCss = styled(Button)`\n  min-width: 48px;\n  height: 48px;\n\n  font-size: 24px;\n  color: ${theme.palette.primary.white};\n\n  border-radius: 50%;\n  background-color: ${theme.palette.primary.accent};\n  box-shadow: 0px 4px 10px 0px ${theme.palette.primary.accent};\n\n  &:hover {\n    background-color: ${theme.palette.primary.accent};\n  }\n`;\n\nexport const AddProductFormWrapperCss = styled(Box)`\n  height: 100vh;\n  margin-top: 122px;\n  padding: 80px 20px;\n  text-align: center;\n\n  background-color: ${theme.palette.primary.white};\n  outline: none;\n`;\n\nexport const ModalCss = styled(Modal)`\n  .MuiModal-backdrop {\n    background-color: transparent;\n  }\n`;\n\nexport const KeyboardReturnIconWrapperCss = styled(Box)`\n  position: absolute;\n  top: 90px;\n  pointer-events: none;\n`;\n","import * as React from 'react';\nimport KeyboardReturnIcon from '@mui/icons-material/KeyboardReturn';\nimport { DiarySearchProductForm } from '../DiarySearchProductForm';\n\nimport {\n  ButtonContainedCss,\n  AddProductFormWrapperCss,\n  ModalCss,\n  KeyboardReturnIconWrapperCss,\n} from './DiarySearchProductMobile.styled';\n\nexport const DiarySearchProductMobile = () => {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <ModalCss\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <AddProductFormWrapperCss>\n          <KeyboardReturnIconWrapperCss>\n            <KeyboardReturnIcon />\n          </KeyboardReturnIconWrapperCss>\n\n          <DiarySearchProductForm />\n        </AddProductFormWrapperCss>\n      </ModalCss>\n\n      <ButtonContainedCss onClick={handleOpen}>+</ButtonContainedCss>\n    </div>\n  );\n};\n","import { Box } from '@mui/material';\nimport styled from '@emotion/styled';\n\nexport const BoxCss = styled(Box)`\n  & button {\n    min-width: 0;\n    width: 48px;\n    height: 48px;\n  }\n`;\n","import { DiarySearchProductForm } from '../DiarySearchProductForm';\nimport { BoxCss } from './DiarySearchProduct.styled';\n\nexport const DiarySearchProduct = () => {\n  return (\n    <BoxCss>\n      <DiarySearchProductForm />\n    </BoxCss>\n  );\n};\n","import { Box } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { theme } from '../../constants/theme';\n\nexport const DatePickerBoxCss = styled(Box)`\n  display: flex;\n  align-items: center;\n  margin-top: 48px;\n  width: 155px;\n\n  ${theme.breakpoints.up('tablet')} {\n    width: 260px;\n  }\n\n  & > .MuiSvgIcon-root {\n    fill: ${theme.palette.primary.darkGrey};\n  }\n\n  & > .MuiFormControl-root input {\n    padding: 0;\n    font-family: VerdanaBold;\n    font-size: 18px;\n    line-height: 22px;\n\n    ${theme.breakpoints.up('tablet')} {\n      font-size: 34px;\n      line-height: 41px;\n    }\n  }\n`;\n\nexport const DiaryListProductsBoxCss = styled(Box)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 60px 20px;\n\n  ${theme.breakpoints.up('tablet')} {\n    padding-right: 0;\n    padding-left: 0;\n    justify-content: start;\n  }\n`;\n","import dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { MobileDatePicker } from '@mui/x-date-pickers/MobileDatePicker';\nimport DateRangeIcon from '@mui/icons-material/DateRange';\nimport { useDispatch } from 'react-redux';\n\nimport { DiarySearchProductMobile } from '../DiarySearchProductMobile';\nimport { DiarySearchProduct } from '../DiarySearchProduct/DiarySearchProduct';\nimport { useScreenSize } from '../../hooks/useScreenSize';\nimport { getUserInfo } from '../../redux/userInfo/userInfoOperations';\nimport { theme } from '../../constants/theme';\n\nimport {\n  DatePickerBoxCss,\n  DiaryListProductsBoxCss,\n} from './DiaryUserCalendar.styled';\n\nconst currentDate = new Date();\nexport let selectedDate = currentDate;\n\nexport const DiaryUserCalendar = () => {\n  const screenSize = useScreenSize();\n  const dispatch = useDispatch();\n  dispatch(getUserInfo()).finally(() => {});\n\n  const onAcceptDate = value => {\n    selectedDate = value;\n  };\n\n  return (\n    <>\n      <DatePickerBoxCss>\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <MobileDatePicker\n            format=\"DD.MM.YYYY\"\n            onAccept={onAcceptDate}\n            value={dayjs(selectedDate)}\n          />\n          <DateRangeIcon />\n        </LocalizationProvider>\n      </DatePickerBoxCss>\n\n      <DiaryListProductsBoxCss>\n        {screenSize.width < theme.breakpoints.values.tablet ? (\n          <DiarySearchProductMobile />\n        ) : (\n          <DiarySearchProduct />\n        )}\n      </DiaryListProductsBoxCss>\n    </>\n  );\n};\n"],"names":["ButtonSubmitCss","styled","Button","theme","palette","primary","accent","ButtonSubmit","name","type","variant","VisuallyHidden","Typography","FormCss","TextFieldCss","TextField","searchProductFormValidationSchema","yup","shape","weight","min","max","positive","required","DiarySearchProductForm","dispatch","useDispatch","screenSize","useScreenSize","foundProductsList","store","products","console","log","useState","productName","setProductName","selectedProduct","setSelectedProduct","handleInputChange","event","target","value","debouncedResults","useMemo","debounce","useEffect","cancel","getProductsFromList","formik","useFormik","initialValues","search","validationSchema","onSubmit","values","resetForm","setSubmitting","payload","finally","Box","component","handleSubmit","Autocomplete","freeSolo","id","disableClearable","onInputChange","onChange","_event","options","map","option","string","title","en","toUpperCase","slice","renderOption","props","key","renderInput","params","label","InputProps","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","width","ButtonContainedCss","AddProductFormWrapperCss","ModalCss","Modal","KeyboardReturnIconWrapperCss","DiarySearchProductMobile","React","open","setOpen","onClose","KeyboardReturn","onClick","BoxCss","DiarySearchProduct","DatePickerBoxCss","DiaryListProductsBoxCss","selectedDate","Date","DiaryUserCalendar","getUserInfo","LocalizationProvider","dateAdapter","AdapterDayjs","MobileDatePicker","format","onAccept","dayjs","DateRange"],"sourceRoot":""}